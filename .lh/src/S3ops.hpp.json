{
    "sourceFile": "src/S3ops.hpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1628034617602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1628035210325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n \n public:\n     S3TransferManager(OrthancPluginContext *c):\n         S3Impl(c) {\n-        LogInfo(_context, \"[S3] S3TransferManager\");\n+        LogInfo(\"[S3] S3TransferManager\");\n     };\n \n     bool ConfigureAwsSdk(const std::string& s3_access_key, const std::string& s3_secret_key,\n                          const std::string& _bucket_name, const std::string& s3_region);\n"
                }
            ],
            "date": 1628034617602,
            "name": "Commit-0",
            "content": "/**\n * S3 Storage Plugin - A plugin for Orthanc DICOM Server for storing\n * DICOM data in Amazon Simple Storage Service (AWS S3).\n *\n * Copyright (C) 2018 (Radpoint Sp. z o.o., Poland)\n * Marek Kwasecki, Bartłomiej Pyciński\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n **/\n\n#ifndef S3OPS_HPP\n#define S3OPS_HPP\n\n#include \"OrthancPluginCppWrapper.h\"\n\n#include <aws/core/Aws.h>\n#include <aws/s3/S3Client.h>\n#include <aws/core/utils/logging/AWSLogging.h>\n#include <aws/transfer/TransferManager.h>\n\n#include <algorithm>\n#include <string>\n\nnamespace OrthancPlugins {\n\nenum class S3Method {\n    DIRECT,\n    TRANSFER_MANAGER\n};\n\nclass S3Impl {\n\nprotected:\n    OrthancPluginContext* _context;\n    Aws::String _bucket_name;\n    //Aws::String s3_region;\n    Aws::SDKOptions aws_api_options;\n    std::shared_ptr<Aws::S3::S3Client> s3_client;\n\npublic:\n    S3Impl(OrthancPluginContext *c): _context(c) {};\n    virtual ~S3Impl() {\n        //Cleanup AWS logging\n        Aws::Utils::Logging::ShutdownAWSLogging();\n        Aws::ShutdownAPI(aws_api_options);\n\n        _context = nullptr;\n    };\n\n    virtual bool ConfigureAwsSdk(const std::string& s3_access_key, const std::string& s3_secret_key,\n                         const std::string& _bucket_name, const std::string& s3_region);\n\n    virtual bool UploadFileToS3(const std::string & path, const void* content, const int64_t& size) = 0;\n    virtual bool DownloadFileFromS3(const std::string & path, void** content, int64_t* size) = 0;\n    virtual bool DeleteFileFromS3(const std::string & path) = 0;\n\n};\n\nclass S3Direct : public S3Impl\n{\npublic:\n    S3Direct(OrthancPluginContext *c):\n        S3Impl(c) {\n        LogInfo(\"[S3] S3Direct\");\n    };\n\n    bool UploadFileToS3(const std::string & path, const void *content, const int64_t &size);\n    bool DownloadFileFromS3(const std::string & path, void** content, int64_t* size);\n    bool DeleteFileFromS3(const std::string & path);\n};\n\nclass S3TransferManager : public S3Impl\n{\n    std::shared_ptr<Aws::Utils::Threading::Executor> _executor;\n    std::shared_ptr<Aws::Transfer::TransferManager> _tm;\n\n    void LogDetails(const std::shared_ptr<const Aws::Transfer::TransferHandle> &h);\n\npublic:\n    S3TransferManager(OrthancPluginContext *c):\n        S3Impl(c) {\n        LogInfo(_context, \"[S3] S3TransferManager\");\n    };\n\n    bool ConfigureAwsSdk(const std::string& s3_access_key, const std::string& s3_secret_key,\n                         const std::string& _bucket_name, const std::string& s3_region);\n\n    bool UploadFileToS3(const std::string & path, const void *content, const int64_t& size);\n    bool DownloadFileFromS3(const std::string & path, void** content, int64_t* size);\n    bool DeleteFileFromS3(const std::string & path);\n};\n\n\nclass S3Facade\n{\n    std::unique_ptr<S3Impl> _s3;\n\npublic:\n    S3Facade(S3Method m, OrthancPluginContext *context);\n\n    bool ConfigureAwsSdk(const std::string& s3_access_key, const std::string& s3_secret_key,\n                         const std::string& s3_bucket_name, const std::string& s3_region) {\n        return _s3->ConfigureAwsSdk(s3_access_key, s3_secret_key, s3_bucket_name, s3_region);\n    };\n\n    bool UploadFileToS3(const std::string & path, const void* content, const int64_t& size) {\n        return _s3->UploadFileToS3(path, content, size);\n    };\n    bool DownloadFileFromS3(const std::string & path, void** content, int64_t* size) {\n        return _s3->DownloadFileFromS3(path, content, size);\n    };\n    bool DeleteFileFromS3(const std::string & path) {\n        return _s3->DeleteFileFromS3(path);\n    };\n};\n\n}\n#endif // S3OPS_HPP\n"
        }
    ]
}