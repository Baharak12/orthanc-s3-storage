{
    "sourceFile": "src/Plugin.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1628034972547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1628034980674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n     {\n         auto executionDuration = timer.elapsed();\n         std::stringstream ss;\n         ss << \"[S3] PUT \" << uuid << \" finished in \" << executionDuration << \"us\";\n-        LogInfo(context, ss.str().c_str());\n+        LogInfo(ss.str().c_str());\n     }\n \n     return ok ? OrthancPluginErrorCode_Success : OrthancPluginErrorCode_StorageAreaPlugin;\n }\n"
                },
                {
                    "date": 1628034986096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n \n     {\n         std::stringstream ss;\n         ss << \"[S3] GET: \" << uuid;\n-        LogInfo(context, ss.str().c_str());\n+        LogInfo(ss.str().c_str());\n     }\n \n     try {\n         path = GetPathStorage(uuid);\n"
                },
                {
                    "date": 1628034995011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n         ok = s3->UploadFileToS3(path, content, size);\n     } catch (Orthanc::OrthancException &e) {\n         std::stringstream err;\n         err << \"[S3] Could not open uuid: \" << path << \", \" << e.What();\n-        LogError(context, err.str().c_str());\n+        LogError(err.str().c_str());\n         ok = false;\n     }\n \n     {\n@@ -125,18 +125,18 @@\n         ok = s3->DownloadFileFromS3(path, content, size);\n     } catch (Orthanc::OrthancException &e) {\n         std::stringstream err;\n         err << \"[S3] Could not read file: \" << path << \", \" << e.What();\n-        LogError(context, err.str().c_str());\n+        LogError(err.str().c_str());\n         ok = false;\n     }\n \n \n     {\n         auto executionDuration = timer.elapsed();\n         std::stringstream ss;\n         ss << \"[S3] GET \" << uuid << \" finished in \" << executionDuration << \"us\";\n-        LogInfo(context, ss.str().c_str());\n+        LogInfo(ss.str().c_str());\n     }\n \n     return ok ? OrthancPluginErrorCode_Success : OrthancPluginErrorCode_StorageAreaPlugin;\n }\n"
                },
                {
                    "date": 1628035002025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,9 +160,9 @@\n         ok = s3->DeleteFileFromS3(path);\n     } catch (Orthanc::OrthancException &e) {\n         std::stringstream err;\n         err <<\"[S3] Could not remove file: \" << path << \", \" << e.What();\n-        LogError(context, err.str().c_str());\n+        LogError(err.str().c_str());\n         ok = false;\n     }\n \n     {\n"
                },
                {
                    "date": 1628035024774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n     {\n         auto executionDuration = timer.elapsed();\n         std::stringstream ss;\n         ss << \"[S3] DELETE; \" << uuid << \" finished in \" << executionDuration << \"us\";\n-        LogInfo(context, ss.str().c_str());\n+        LogInfo( ss.str().c_str());\n     }\n \n     return ok ? OrthancPluginErrorCode_Success: OrthancPluginErrorCode_StorageAreaPlugin;\n }\n"
                },
                {
                    "date": 1628035037741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,9 +182,9 @@\n     //idex storage\n     indexDir = configuration.GetStringValue(\"IndexDirectory\", indexDir.c_str());  //last parameter = default value\n \n     if (indexDir.empty()) {\n-        LogWarning(context, \"StorageDir and IndexDir were not set.\");\n+        LogWarning(\"StorageDir and IndexDir were not set.\");\n     }\n \n     //make sure indexDir exist\n     Utils::makeDirectory(indexDir);\n"
                },
                {
                    "date": 1628035043173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,9 +151,9 @@\n \n     {\n         std::stringstream ss;\n         ss << \"[S3] DELETE: \" << uuid;\n-        LogInfo(context, ss.str().c_str());\n+        LogInfo(ss.str().c_str());\n     }\n \n     try {\n         path = GetPathStorage(uuid);\n@@ -168,9 +168,9 @@\n     {\n         auto executionDuration = timer.elapsed();\n         std::stringstream ss;\n         ss << \"[S3] DELETE; \" << uuid << \" finished in \" << executionDuration << \"us\";\n-        LogInfo( ss.str().c_str());\n+        LogInfo(ss.str().c_str());\n     }\n \n     return ok ? OrthancPluginErrorCode_Success: OrthancPluginErrorCode_StorageAreaPlugin;\n }\n@@ -193,9 +193,9 @@\n     OrthancPlugins::OrthancConfiguration s3_configuration(context);\n     if (configuration.IsSection(\"S3\")) {\n         configuration.GetSection(s3_configuration, \"S3\");\n     } else {\n-        LogError(context, \"Can't find `S3` section in the config.\");\n+        LogError(\"Can't find `S3` section in the config.\");\n         return false;\n     }\n \n     c.s3_access_key = s3_configuration.GetStringValue(\"aws_access_key_id\", \"\").c_str();\n"
                },
                {
                    "date": 1628035051086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -220,9 +220,9 @@\n         LogInfo(context, \"[S3] Aws Secret Key set\");\n \n     std::stringstream log_region;\n     log_region << \"[S3] Aws region: \" << c.s3_region;\n-    LogInfo(context, log_region.str().c_str());\n+    LogInfo(log_region.str().c_str());\n \n     std::stringstream log_bucket;\n     log_bucket << \"[S3] Aws bucket: \" << c.s3_bucket_name;\n     LogInfo(context, log_bucket.str().c_str());\n"
                },
                {
                    "date": 1628035057493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -235,9 +235,9 @@\n \n ORTHANC_PLUGINS_API int32_t OrthancPluginInitialize(OrthancPluginContext* pluginContext)\n {\n     context = pluginContext;\n-    LogWarning(context, \"[S3] Storage plugin is initializing\");\n+    LogWarning(\"[S3] Storage plugin is initializing\");\n \n     /* Check the version of the Orthanc core */\n     if (OrthancPluginCheckVersion(context) == 0)\n     {\n"
                },
                {
                    "date": 1628035098369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -224,9 +224,9 @@\n     LogInfo(log_region.str().c_str());\n \n     std::stringstream log_bucket;\n     log_bucket << \"[S3] Aws bucket: \" << c.s3_bucket_name;\n-    LogInfo(context, log_bucket.str().c_str());\n+    LogInfo(log_bucket.str().c_str());\n \n     return true;\n }\n \n@@ -246,9 +246,9 @@\n         << ORTHANC_PLUGINS_MINIMAL_MAJOR_NUMBER << '.'\n         << ORTHANC_PLUGINS_MINIMAL_MINOR_NUMBER << '.'\n         << ORTHANC_PLUGINS_MINIMAL_REVISION_NUMBER << '.'\n         << \" to run this plugin\";\n-        LogError(context, ss.str());\n+        LogError(ss.str());\n         return -1;\n     }\n \n     OrthancPluginSetDescription(context, \"Implementation of S3 Storage.\");\n@@ -279,9 +279,9 @@\n ORTHANC_PLUGINS_API void OrthancPluginFinalize()\n {\n     s3.release();\n \n-    LogWarning(context, \"[S3] Storage plugin is finalizing\");\n+    LogWarning(\"[S3] Storage plugin is finalizing\");\n }\n \n \n ORTHANC_PLUGINS_API const char* OrthancPluginGetName()\n"
                },
                {
                    "date": 1628035242183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -216,9 +216,9 @@\n     // Log stuff\n     if (!c.s3_access_key.empty())\n         LogInfo(context, \"[S3] Aws Access Key set\");\n     if (!c.s3_secret_key.empty())\n-        LogInfo(context, \"[S3] Aws Secret Key set\");\n+        LogInfo(\"[S3] Aws Secret Key set\");\n \n     std::stringstream log_region;\n     log_region << \"[S3] Aws region: \" << c.s3_region;\n     LogInfo(log_region.str().c_str());\n"
                },
                {
                    "date": 1628035255314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -214,9 +214,9 @@\n \n \n     // Log stuff\n     if (!c.s3_access_key.empty())\n-        LogInfo(context, \"[S3] Aws Access Key set\");\n+        LogInfo(\"[S3] Aws Access Key set\");\n     if (!c.s3_secret_key.empty())\n         LogInfo(\"[S3] Aws Secret Key set\");\n \n     std::stringstream log_region;\n"
                }
            ],
            "date": 1628034972547,
            "name": "Commit-0",
            "content": "/**\n * S3 Storage Plugin - A plugin for Orthanc DICOM Server for storing\n * DICOM data in Amazon Simple Storage Service (AWS S3).\n *\n * Copyright (C) 2018 (Radpoint Sp. z o.o., Poland)\n * Marek Kwasecki, Bartłomiej Pyciński\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n **/\n\n#include \"OrthancPluginCppWrapper.h\"\n#include \"Version.hpp\"\n#include \"Timer.hpp\"\n#include \"Utils.hpp\"\n#include \"S3ops.hpp\"\n\n#include <boost/algorithm/string.hpp>\n\n#include <json/value.h>\n#include <json/reader.h>\n#include <string>\n#include <sstream>\n#include <iostream>\n#include <algorithm>\n\n#define AWS_DEFAULT_REGION \"eu-central-1\"\n#define AWS_DEFAULT_BUCKET_MAME \"delme-test-bucket\"\n\nnamespace OrthancPlugins {\n\nstruct S3PluginContext {\n    std::string s3_access_key;\n    std::string s3_secret_key;\n\n    std::string s3_region;\n    std::string s3_bucket_name;\n\n    S3Method s3_method = S3Method::DIRECT;\n};\n\nOrthancPluginContext* context = nullptr;\n\n//std::unique_ptr<S3Facade> s3;\nstatic std::unique_ptr<S3Impl> s3;\nstatic std::string indexDir = \"\";\n\nstatic std::string GetPathStorage(const char* uuid)\n{\n  return uuid;\n}\n\nstatic std::string GetPathInstance(const char* uuid)\n{\n    std::string level_1 (uuid, 0, 2);\n    std::string level_2 (uuid, 2, 2);\n    return indexDir + \"/\" + level_1 + \"/\" + level_2  + \"/\" + std::string(uuid);\n\n}\n\n\nstatic OrthancPluginErrorCode StorageCreate(const char* uuid,\n                                            const void* content,\n                                            int64_t size,\n                                            OrthancPluginContentType type)\n{\n    Stopwatch timer;\n    bool ok = false;\n    std::string path;\n\n    {\n        std::stringstream ss;\n        ss << \"[S3] PUT: \" << uuid << \" begin\";\n        LogInfo(ss.str().c_str());\n    }\n\n    try {\n        path = GetPathStorage(uuid);\n        ok = s3->UploadFileToS3(path, content, size);\n    } catch (Orthanc::OrthancException &e) {\n        std::stringstream err;\n        err << \"[S3] Could not open uuid: \" << path << \", \" << e.What();\n        LogError(context, err.str().c_str());\n        ok = false;\n    }\n\n    {\n        auto executionDuration = timer.elapsed();\n        std::stringstream ss;\n        ss << \"[S3] PUT \" << uuid << \" finished in \" << executionDuration << \"us\";\n        LogInfo(context, ss.str().c_str());\n    }\n\n    return ok ? OrthancPluginErrorCode_Success : OrthancPluginErrorCode_StorageAreaPlugin;\n}\n\n\nstatic OrthancPluginErrorCode StorageRead(void** content,\n                                          int64_t* size,\n                                          const char* uuid,\n                                          OrthancPluginContentType type)\n{\n    Stopwatch timer;\n    bool ok = false;\n    std::string path;\n\n    {\n        std::stringstream ss;\n        ss << \"[S3] GET: \" << uuid;\n        LogInfo(context, ss.str().c_str());\n    }\n\n    try {\n        path = GetPathStorage(uuid);\n        ok = s3->DownloadFileFromS3(path, content, size);\n    } catch (Orthanc::OrthancException &e) {\n        std::stringstream err;\n        err << \"[S3] Could not read file: \" << path << \", \" << e.What();\n        LogError(context, err.str().c_str());\n        ok = false;\n    }\n\n\n    {\n        auto executionDuration = timer.elapsed();\n        std::stringstream ss;\n        ss << \"[S3] GET \" << uuid << \" finished in \" << executionDuration << \"us\";\n        LogInfo(context, ss.str().c_str());\n    }\n\n    return ok ? OrthancPluginErrorCode_Success : OrthancPluginErrorCode_StorageAreaPlugin;\n}\n\n\nstatic OrthancPluginErrorCode StorageRemove(const char* uuid,\n                                            OrthancPluginContentType type)\n{\n    bool ok = false;\n    std::string path;\n    Stopwatch timer;\n\n    {\n        std::stringstream ss;\n        ss << \"[S3] DELETE: \" << uuid;\n        LogInfo(context, ss.str().c_str());\n    }\n\n    try {\n        path = GetPathStorage(uuid);\n        ok = s3->DeleteFileFromS3(path);\n    } catch (Orthanc::OrthancException &e) {\n        std::stringstream err;\n        err <<\"[S3] Could not remove file: \" << path << \", \" << e.What();\n        LogError(context, err.str().c_str());\n        ok = false;\n    }\n\n    {\n        auto executionDuration = timer.elapsed();\n        std::stringstream ss;\n        ss << \"[S3] DELETE; \" << uuid << \" finished in \" << executionDuration << \"us\";\n        LogInfo(context, ss.str().c_str());\n    }\n\n    return ok ? OrthancPluginErrorCode_Success: OrthancPluginErrorCode_StorageAreaPlugin;\n}\n\nbool readS3Configuration(OrthancPluginContext* context, S3PluginContext& c) {\n\n    OrthancPlugins::OrthancConfiguration configuration(context);\n\n    //idex storage\n    indexDir = configuration.GetStringValue(\"IndexDirectory\", indexDir.c_str());  //last parameter = default value\n\n    if (indexDir.empty()) {\n        LogWarning(context, \"StorageDir and IndexDir were not set.\");\n    }\n\n    //make sure indexDir exist\n    Utils::makeDirectory(indexDir);\n\n    // obtain S3 creds\n    OrthancPlugins::OrthancConfiguration s3_configuration(context);\n    if (configuration.IsSection(\"S3\")) {\n        configuration.GetSection(s3_configuration, \"S3\");\n    } else {\n        LogError(context, \"Can't find `S3` section in the config.\");\n        return false;\n    }\n\n    c.s3_access_key = s3_configuration.GetStringValue(\"aws_access_key_id\", \"\").c_str();\n    c.s3_secret_key = s3_configuration.GetStringValue(\"aws_secret_access_key\", \"\").c_str();\n\n    c.s3_region = s3_configuration.GetStringValue(\"aws_region\", AWS_DEFAULT_REGION).c_str();\n    c.s3_bucket_name = s3_configuration.GetStringValue(\"s3_bucket\", AWS_DEFAULT_BUCKET_MAME).c_str();\n\n    std::string method;\n    s3_configuration.LookupStringValue(method, \"implementation\");\n    if (boost::iequals(method,\"direct\")) {\n        c.s3_method = S3Method::DIRECT;\n    } else if (boost::iequals(method, \"transfer_manager\")) {\n        c.s3_method = S3Method::TRANSFER_MANAGER;\n    } // else default is DIRECT\n\n\n    // Log stuff\n    if (!c.s3_access_key.empty())\n        LogInfo(context, \"[S3] Aws Access Key set\");\n    if (!c.s3_secret_key.empty())\n        LogInfo(context, \"[S3] Aws Secret Key set\");\n\n    std::stringstream log_region;\n    log_region << \"[S3] Aws region: \" << c.s3_region;\n    LogInfo(context, log_region.str().c_str());\n\n    std::stringstream log_bucket;\n    log_bucket << \"[S3] Aws bucket: \" << c.s3_bucket_name;\n    LogInfo(context, log_bucket.str().c_str());\n\n    return true;\n}\n\n\nextern \"C\" {\n\nORTHANC_PLUGINS_API int32_t OrthancPluginInitialize(OrthancPluginContext* pluginContext)\n{\n    context = pluginContext;\n    LogWarning(context, \"[S3] Storage plugin is initializing\");\n\n    /* Check the version of the Orthanc core */\n    if (OrthancPluginCheckVersion(context) == 0)\n    {\n        std::stringstream ss;\n        ss << \"Your version of Orthanc (\" << context->orthancVersion << \") must be above \"\n        << ORTHANC_PLUGINS_MINIMAL_MAJOR_NUMBER << '.'\n        << ORTHANC_PLUGINS_MINIMAL_MINOR_NUMBER << '.'\n        << ORTHANC_PLUGINS_MINIMAL_REVISION_NUMBER << '.'\n        << \" to run this plugin\";\n        LogError(context, ss.str());\n        return -1;\n    }\n\n    OrthancPluginSetDescription(context, \"Implementation of S3 Storage.\");\n\n    S3PluginContext c;\n    if (!readS3Configuration(context, c)) {\n        return EXIT_FAILURE;\n    }\n\n    //Initialization of AWS SDK\n    //s3 = std::unique_ptr<S3Facade>(new S3Facade(c.s3_method, context));\n    if (c.s3_method == S3Method::DIRECT) {\n        s3 = std::unique_ptr<S3Impl>(new S3Direct(context));\n    } else {//if (c.s3_method == S3Method::TRANSFER_MANAGER) {\n        s3 = std::unique_ptr<S3Impl>(new S3TransferManager(context));\n    }\n\n    if (!s3->ConfigureAwsSdk(c.s3_access_key, c.s3_secret_key, c.s3_bucket_name, c.s3_region)) {\n        return EXIT_FAILURE;\n    }\n\n    OrthancPluginRegisterStorageArea(context, StorageCreate, StorageRead, StorageRemove);\n\n    return 0;\n}\n\n\nORTHANC_PLUGINS_API void OrthancPluginFinalize()\n{\n    s3.release();\n\n    LogWarning(context, \"[S3] Storage plugin is finalizing\");\n}\n\n\nORTHANC_PLUGINS_API const char* OrthancPluginGetName()\n{\n    return NAME;\n}\n\n\nORTHANC_PLUGINS_API const char* OrthancPluginGetVersion()\n{\n    return PLUGIN_VERSION;\n}\n\n} //extern C\n\n} //namespace\n"
        }
    ]
}