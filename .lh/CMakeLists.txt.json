{
    "sourceFile": "CMakeLists.txt",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1628029819621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1628029828632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n set(JSONCPP_CXX11 ON) #TODO: does this work?\n \n # Parameters of the build\n set(STATIC_BUILD OFF CACHE BOOL \"Static build of the third-party libraries (necessary for Windows)\")\n-set(ALLOW_DOWNLOADS CACHE BOOL \"Allow CMake to download packages\")\n+set(ALLOW_DOWNLOADS ON CACHE BOOL \"Allow CMake to download packages\")\n set(ORTHANC_FRAMEWORK_SOURCE \"${ORTHANC_FRAMEWORK_DEFAULT_SOURCE}\" CACHE STRING \"Source of the Orthanc source code (can be \\\"hg\\\", \\\"archive\\\", \\\"web\\\" or \\\"path\\\")\")\n set(ORTHANC_FRAMEWORK_ARCHIVE \"\" CACHE STRING \"Path to the Orthanc archive, if ORTHANC_FRAMEWORK_SOURCE is \\\"archive\\\"\")\n set(ORTHANC_FRAMEWORK_ROOT \"\" CACHE STRING \"Path to the Orthanc source directory, if ORTHANC_FRAMEWORK_SOURCE is \\\"path\\\"\")\n \n"
                },
                {
                    "date": 1628029855317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n set(JSONCPP_CXX11 ON) #TODO: does this work?\n \n # Parameters of the build\n set(STATIC_BUILD OFF CACHE BOOL \"Static build of the third-party libraries (necessary for Windows)\")\n-set(ALLOW_DOWNLOADS ON CACHE BOOL \"Allow CMake to download packages\")\n+set(ALLOW_DOWNLOADS ON \"Allow CMake to download packages\")\n set(ORTHANC_FRAMEWORK_SOURCE \"${ORTHANC_FRAMEWORK_DEFAULT_SOURCE}\" CACHE STRING \"Source of the Orthanc source code (can be \\\"hg\\\", \\\"archive\\\", \\\"web\\\" or \\\"path\\\")\")\n set(ORTHANC_FRAMEWORK_ARCHIVE \"\" CACHE STRING \"Path to the Orthanc archive, if ORTHANC_FRAMEWORK_SOURCE is \\\"archive\\\"\")\n set(ORTHANC_FRAMEWORK_ROOT \"\" CACHE STRING \"Path to the Orthanc source directory, if ORTHANC_FRAMEWORK_SOURCE is \\\"path\\\"\")\n \n"
                },
                {
                    "date": 1628032500420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n include(${ORTHANC_ROOT}/Resources/CMake/JsonCppConfiguration.cmake)\n include(${ORTHANC_ROOT}/Resources/CMake/LibCurlConfiguration.cmake)\n include(${ORTHANC_ROOT}/Resources/CMake/OpenSslConfiguration.cmake)\n include(${ORTHANC_ROOT}/Resources/CMake/ZlibConfiguration.cmake)\n-include(${CMAKE_SOURCE_DIR}/Resources/CMake/AwsSdkConfiguration.cmake)\n+# include(${CMAKE_SOURCE_DIR}/Resources/CMake/AwsSdkConfiguration.cmake)\n \n message(\"ORTHANC_ROOT: ${ORTHANC_ROOT}\")\n message(\"STATIC_BUILD: ${STATIC_BUILD}\")\n message(\"USE_SYSTEM_ORTHANC_SDK: ${USE_SYSTEM_ORTHANC_SDK}\")\n"
                },
                {
                    "date": 1628032748605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,8 +64,23 @@\n include(${ORTHANC_ROOT}/Resources/CMake/OpenSslConfiguration.cmake)\n include(${ORTHANC_ROOT}/Resources/CMake/ZlibConfiguration.cmake)\n # include(${CMAKE_SOURCE_DIR}/Resources/CMake/AwsSdkConfiguration.cmake)\n \n+# Setup for AWS SDK.\n+# This is a bit mad, as their own packaging installs the C and C++ API components in different places.\n+list(APPEND awssdk_root_globs /usr/mbi/lib/cmake/* /usr/mbi/lib/*)\n+file(GLOB awssdk_all LIST_DIRECTORIES true ${awssdk_root_globs})\n+file(GLOB awssdk_files LIST_DIRECTORIES false ${awssdk_root_globs})\n+# compute set difference ...\n+list(APPEND awssdk_subdirs ${awssdk_all})\n+list(REMOVE_ITEM awssdk_subdirs ${awssdk_files})\n+# now configure with the result\n+list(APPEND CMAKE_MODULE_PATH ${awssdk_subdirs})\n+list(APPEND CMAKE_PREFIX_PATH ${awssdk_subdirs})\n+# now we can use it\n+#set(AWSSDK_DIR /usr/mbi/lib/cmake/AWSSDK)\n+find_package(AWSSDK REQUIRED COMPONENTS s3 sts)\n+\n message(\"ORTHANC_ROOT: ${ORTHANC_ROOT}\")\n message(\"STATIC_BUILD: ${STATIC_BUILD}\")\n message(\"USE_SYSTEM_ORTHANC_SDK: ${USE_SYSTEM_ORTHANC_SDK}\")\n list(LENGTH ORTHANC_CORE_SOURCES COUNT_CORE_SOURCES)\n"
                },
                {
                    "date": 1628032754854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,23 +64,8 @@\n include(${ORTHANC_ROOT}/Resources/CMake/OpenSslConfiguration.cmake)\n include(${ORTHANC_ROOT}/Resources/CMake/ZlibConfiguration.cmake)\n # include(${CMAKE_SOURCE_DIR}/Resources/CMake/AwsSdkConfiguration.cmake)\n \n-# Setup for AWS SDK.\n-# This is a bit mad, as their own packaging installs the C and C++ API components in different places.\n-list(APPEND awssdk_root_globs /usr/mbi/lib/cmake/* /usr/mbi/lib/*)\n-file(GLOB awssdk_all LIST_DIRECTORIES true ${awssdk_root_globs})\n-file(GLOB awssdk_files LIST_DIRECTORIES false ${awssdk_root_globs})\n-# compute set difference ...\n-list(APPEND awssdk_subdirs ${awssdk_all})\n-list(REMOVE_ITEM awssdk_subdirs ${awssdk_files})\n-# now configure with the result\n-list(APPEND CMAKE_MODULE_PATH ${awssdk_subdirs})\n-list(APPEND CMAKE_PREFIX_PATH ${awssdk_subdirs})\n-# now we can use it\n-#set(AWSSDK_DIR /usr/mbi/lib/cmake/AWSSDK)\n-find_package(AWSSDK REQUIRED COMPONENTS s3 sts)\n-\n message(\"ORTHANC_ROOT: ${ORTHANC_ROOT}\")\n message(\"STATIC_BUILD: ${STATIC_BUILD}\")\n message(\"USE_SYSTEM_ORTHANC_SDK: ${USE_SYSTEM_ORTHANC_SDK}\")\n list(LENGTH ORTHANC_CORE_SOURCES COUNT_CORE_SOURCES)\n"
                },
                {
                    "date": 1628032766121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,8 +64,23 @@\n include(${ORTHANC_ROOT}/Resources/CMake/OpenSslConfiguration.cmake)\n include(${ORTHANC_ROOT}/Resources/CMake/ZlibConfiguration.cmake)\n # include(${CMAKE_SOURCE_DIR}/Resources/CMake/AwsSdkConfiguration.cmake)\n \n+# Setup for AWS SDK.\n+# This is a bit mad, as their own packaging installs the C and C++ API components in different places.\n+list(APPEND awssdk_root_globs /usr/mbi/lib/cmake/* /usr/mbi/lib/*)\n+file(GLOB awssdk_all LIST_DIRECTORIES true ${awssdk_root_globs})\n+file(GLOB awssdk_files LIST_DIRECTORIES false ${awssdk_root_globs})\n+# compute set difference ...\n+list(APPEND awssdk_subdirs ${awssdk_all})\n+list(REMOVE_ITEM awssdk_subdirs ${awssdk_files})\n+# now configure with the result\n+list(APPEND CMAKE_MODULE_PATH ${awssdk_subdirs})\n+list(APPEND CMAKE_PREFIX_PATH ${awssdk_subdirs})\n+# now we can use it\n+#set(AWSSDK_DIR /usr/mbi/lib/cmake/AWSSDK)\n+find_package(AWSSDK REQUIRED COMPONENTS s3 sts)\n+\n message(\"ORTHANC_ROOT: ${ORTHANC_ROOT}\")\n message(\"STATIC_BUILD: ${STATIC_BUILD}\")\n message(\"USE_SYSTEM_ORTHANC_SDK: ${USE_SYSTEM_ORTHANC_SDK}\")\n list(LENGTH ORTHANC_CORE_SOURCES COUNT_CORE_SOURCES)\n"
                },
                {
                    "date": 1628032789875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,8 +79,10 @@\n # now we can use it\n #set(AWSSDK_DIR /usr/mbi/lib/cmake/AWSSDK)\n find_package(AWSSDK REQUIRED COMPONENTS s3 sts)\n \n+\n+\n message(\"ORTHANC_ROOT: ${ORTHANC_ROOT}\")\n message(\"STATIC_BUILD: ${STATIC_BUILD}\")\n message(\"USE_SYSTEM_ORTHANC_SDK: ${USE_SYSTEM_ORTHANC_SDK}\")\n list(LENGTH ORTHANC_CORE_SOURCES COUNT_CORE_SOURCES)\n@@ -148,9 +150,9 @@\n         VERSION ${PLUGIN_VERSION}\n         SOVERSION ${ORTHANC_SDK_VERSION}-${PLUGIN_VERSION}\n         )\n \n-target_link_libraries(OrthancS3StoragePlugin)\n+target_link_libraries(OrthancS3StoragePlugin s3 sts)\n \n install(\n         TARGETS OrthancS3StoragePlugin\n         LIBRARY DESTINATION share/orthanc/plugins    # Destination for Linux\n"
                },
                {
                    "date": 1628032946315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n         VERSION ${PLUGIN_VERSION}\n         SOVERSION ${ORTHANC_SDK_VERSION}-${PLUGIN_VERSION}\n         )\n \n-target_link_libraries(OrthancS3StoragePlugin )\n+target_link_libraries(OrthancS3StoragePlugin $)\n \n install(\n         TARGETS OrthancS3StoragePlugin\n         LIBRARY DESTINATION share/orthanc/plugins    # Destination for Linux\n"
                },
                {
                    "date": 1628033874407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n include(${ORTHANC_ROOT}/Resources/CMake/DownloadPackage.cmake)\n # include(${ORTHANC_ROOT}/Resources/CMake/BoostConfiguration.cmake)\n include(${ORTHANC_ROOT}/Resources/CMake/JsonCppConfiguration.cmake)\n include(${ORTHANC_ROOT}/Resources/CMake/LibCurlConfiguration.cmake)\n-include(${ORTHANC_ROOT}/Resources/CMake/OpenSslConfigurationStatic-.cmake)\n+include(${ORTHANC_ROOT}/Resources/CMake/OpenSslConfigurationStatic-1.cmake)\n include(${ORTHANC_ROOT}/Resources/CMake/ZlibConfiguration.cmake)\n # include(${CMAKE_SOURCE_DIR}/Resources/CMake/AwsSdkConfiguration.cmake)\n \n # Setup for AWS SDK.\n"
                }
            ],
            "date": 1628029819620,
            "name": "Commit-0",
            "content": "cmake_minimum_required(VERSION 3.5)\n\noption(test \"Build all tests.\" OFF) # Makes boolean 'test' available.\n\nproject(OrthancS3Storage)\n\nset(VERSION_MAJOR \"0\" )\nset(VERSION_MINOR \"2\" )\nset(VERSION_PATCH \"1\" )\nset(PLUGIN_VERSION \"${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}\")\n\nset(ORTHANC_SDK_VERSION \"1.4.0\")\n\nif (PLUGIN_VERSION STREQUAL \"mainline\")\n    set(ORTHANC_FRAMEWORK_VERSION \"mainline\")\n    set(ORTHANC_FRAMEWORK_DEFAULT_SOURCE \"path\")\nelse()\n    set(ORTHANC_FRAMEWORK_VERSION \"${ORTHANC_SDK_VERSION}\")\n    set(ORTHANC_FRAMEWORK_DEFAULT_SOURCE \"web\")\nendif()\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_FLAGS_DEBUG \"-g\")\n#Json Reader class is deprecated in Orthanc code\n#Who cares about unused functions :P and default: in switch...\nset(CMAKE_CXX_FLAGS \"-Wno-switch-default -Wno-unused-function -Wno-deprecated-declarations\")\n\nif (APPLE)\n    set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -stdlib=libc++\")\nendif (APPLE)\n\nset(JSONCPP_CXX11 ON) #TODO: does this work?\n\n# Parameters of the build\nset(STATIC_BUILD OFF CACHE BOOL \"Static build of the third-party libraries (necessary for Windows)\")\nset(ALLOW_DOWNLOADS CACHE BOOL \"Allow CMake to download packages\")\nset(ORTHANC_FRAMEWORK_SOURCE \"${ORTHANC_FRAMEWORK_DEFAULT_SOURCE}\" CACHE STRING \"Source of the Orthanc source code (can be \\\"hg\\\", \\\"archive\\\", \\\"web\\\" or \\\"path\\\")\")\nset(ORTHANC_FRAMEWORK_ARCHIVE \"\" CACHE STRING \"Path to the Orthanc archive, if ORTHANC_FRAMEWORK_SOURCE is \\\"archive\\\"\")\nset(ORTHANC_FRAMEWORK_ROOT \"\" CACHE STRING \"Path to the Orthanc source directory, if ORTHANC_FRAMEWORK_SOURCE is \\\"path\\\"\")\n\n# Advanced parameters to fine-tune linking against system libraries\nset(USE_SYSTEM_ORTHANC_SDK ON CACHE BOOL \"Use the system version of the Orthanc plugin SDK\")\n\n# Download and setup the Orthanc framework\ninclude(${CMAKE_SOURCE_DIR}/Resources/Orthanc/DownloadOrthancFramework.cmake)\n\nset(ORTHANC_FRAMEWORK_PLUGIN ON)\ninclude(${ORTHANC_ROOT}/Resources/CMake/OrthancFrameworkParameters.cmake)\n\nset(ENABLE_LOCALE ON)         # Enable support for locales (notably in Boost)\nset(ENABLE_GOOGLE_TEST OFF)\nset(ENABLE_PUGIXML OFF)\nset(USE_BOOST_ICONV ON)\nset(ENABLE_SSL ON)\nset(ENABLE_WEB_CLIENT ON)\n\ninclude(${ORTHANC_ROOT}/Resources/CMake/OrthancFrameworkConfiguration.cmake)\ninclude_directories(${ORTHANC_ROOT})\n\ninclude(${ORTHANC_ROOT}/Resources/CMake/DownloadPackage.cmake)\ninclude(${ORTHANC_ROOT}/Resources/CMake/BoostConfiguration.cmake)\ninclude(${ORTHANC_ROOT}/Resources/CMake/JsonCppConfiguration.cmake)\ninclude(${ORTHANC_ROOT}/Resources/CMake/LibCurlConfiguration.cmake)\ninclude(${ORTHANC_ROOT}/Resources/CMake/OpenSslConfiguration.cmake)\ninclude(${ORTHANC_ROOT}/Resources/CMake/ZlibConfiguration.cmake)\ninclude(${CMAKE_SOURCE_DIR}/Resources/CMake/AwsSdkConfiguration.cmake)\n\nmessage(\"ORTHANC_ROOT: ${ORTHANC_ROOT}\")\nmessage(\"STATIC_BUILD: ${STATIC_BUILD}\")\nmessage(\"USE_SYSTEM_ORTHANC_SDK: ${USE_SYSTEM_ORTHANC_SDK}\")\nlist(LENGTH ORTHANC_CORE_SOURCES COUNT_CORE_SOURCES)\nmessage(\"Elements in ORTHANC_CORE_SOURCES: ${COUNT_CORE_SOURCES}\")\n\n# Check that the Orthanc SDK headers are available\ninclude_directories(${ORTHANC_ROOT}/Plugins/Include) #necessary for orthanc/OrthancCPLugin.h\ninclude_directories(${ORTHANC_ROOT}/Plugins/Samples/Common) #necessary for OrthancPluginCppWrapper.h and friends\n\nif (STATIC_BUILD OR NOT USE_SYSTEM_ORTHANC_SDK)\n    message(\"Including ${ORTHANC_ROOT}/Sdk-${ORTHANC_SDK_VERSION}\")\n    include_directories(\"${ORTHANC_ROOT}/Sdk-${ORTHANC_SDK_VERSION}\")\nelse ()\n    message(\"Checking for orthanc/OrthancCPlugin.h\")\n    CHECK_INCLUDE_FILE_CXX(\"orthanc/OrthancCPlugin.h\" HAVE_ORTHANC_H)\n    message(\"HAVE_ORTHANC_H: ${HAVE_ORTHANC_H}\")\n    #TODO: this check doesn't work\n    #if (NOT HAVE_ORTHANC_H)\n    #  message(FATAL_ERROR \"Please install the headers of the Orthanc plugins SDK\")\n    #endif()\nendif()\n\n#create version.h\nconfigure_file(\n        \"${CMAKE_SOURCE_DIR}/src/Version.hpp.in\"\n        \"${CMAKE_BINARY_DIR}/gen/Version.hpp\")\ninclude_directories(\"${CMAKE_BINARY_DIR}/gen\")\n\nset(SOURCES\n        src/Plugin.cpp\n        src/Utils.cpp\n        src/S3ops.cpp\n        )\n\ninclude_directories(${ORTHANC_ROOT}/Core)  # To access \"OrthancException.h\"\nadd_definitions(\n        -DHAS_ORTHANC_EXCEPTION=1\n        -DORTHANC_ENABLE_LOGGING_PLUGIN=1\n)\n\n#make the installed rpath able to reach aws shared libs\nset(CMAKE_MACOSX_RPATH 1)\nset(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/../aws/lib\")\n\n#workaround of sorts for missing symbol we're using and they don't\nif (NOT USE_SYSTEM_BOOST)\n    list(APPEND ORTHANC_CORE_SOURCES\n            ${BOOST_NAME}/libs/filesystem/src/unique_path.cpp\n            )\nendif (NOT USE_SYSTEM_BOOST)\n\nadd_library(OrthancS3StoragePlugin SHARED\n        ${SOURCES}\n        ${ORTHANC_ROOT}/Plugins/Samples/Common/OrthancPluginCppWrapper.cpp\n        ${ORTHANC_CORE_SOURCES}\n        )\n\nif (NOT USE_SYSTEM_AWS_SDK)\n    add_dependencies(OrthancS3StoragePlugin aws-cpp-sdk)\nendif ()\n\nmessage(\"Setting the version of the library to ${PLUGIN_VERSION}\")\nset_target_properties(OrthancS3StoragePlugin PROPERTIES\n        VERSION ${PLUGIN_VERSION}\n        SOVERSION ${ORTHANC_SDK_VERSION}-${PLUGIN_VERSION}\n        )\n\ntarget_link_libraries(OrthancS3StoragePlugin)\n\ninstall(\n        TARGETS OrthancS3StoragePlugin\n        LIBRARY DESTINATION share/orthanc/plugins    # Destination for Linux\n        #LIBRARY DESTINATION lib    # Destination for Linux\n)\n\n################################\n# Testing\n################################\nif (test)\n    if (APPLE)\n        add_definitions(-DGTEST_USE_OWN_TR1_TUPLE)\n        add_definitions(-D__GLIBCXX__)\n    endif (APPLE)\n\n    # Download and unpack googletest at configure time\n    configure_file(${CMAKE_SOURCE_DIR}/Resources/GoogleTest/CMakeLists.txt.in googletest-download/CMakeLists.txt)\n    execute_process(COMMAND ${CMAKE_COMMAND} -G \"${CMAKE_GENERATOR}\" .\n            RESULT_VARIABLE result\n            WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/googletest-download )\n    if(result)\n        message(FATAL_ERROR \"CMake step for googletest failed: ${result}\")\n    endif()\n    execute_process(COMMAND ${CMAKE_COMMAND} --build .\n            RESULT_VARIABLE result\n            WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/googletest-download )\n    if(result)\n        message(FATAL_ERROR \"Build step for googletest failed: ${result}\")\n    endif()\n\n    # Prevent GoogleTest from overriding our compiler/linker options\n    # when building with Visual Studio\n    set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n\n    # This adds another subdirectory, which has 'project(gtest)'.\n    add_subdirectory(${CMAKE_BINARY_DIR}/googletest-src\n            ${CMAKE_BINARY_DIR}/googletest-build\n            EXCLUDE_FROM_ALL)\n\n    ##############\n    # Unit Tests\n    ##############\n    add_executable(runUnitTests\n            tests/test0.cpp\n            #tests/test1.cpp\n            #tests/test2.cpp\n            )\n\n    set_target_properties (runUnitTests\n            PROPERTIES COMPILE_FLAGS \"-Wno-unused-member-function\")\n\n    target_include_directories(runUnitTests PRIVATE\n            ${CMAKE_SOURCE_DIR}/src\n            )\n\n    # Standard linking to gtest stuff.\n    target_link_libraries(runUnitTests gtest gtest_main)\n\n    # Extra linking for the project.\n    #target_link_libraries(runUnitTests project1_lib)\n\n    # This is so you can do 'make test' to see all your tests run, instead of\n    # manually running the executable runUnitTests to see those specific tests.\n\n    # You can also omit NAME and COMMAND. The second argument could be some other\n    # test executable.\n    add_test(S3Storage.Example runUnitTests)\n    #add_test(MemStreamBuf.StreamTestSeek3a runUnitTests)\nendif()\n"
        }
    ]
}